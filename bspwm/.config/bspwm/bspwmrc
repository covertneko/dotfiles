#!/usr/bin/env bash

bspc config border_width    2
bspc config window_gap      12
bspc config normal_border_color "#1e1e2e"
bspc config active_border_color "#6c7086"
bspc config focused_border_color "#cba6f7"
bspc config presel_feedback_color "#cba6f7"

# edges to reduce gap for
edges=(top bottom left right)
for d in ${edges[@]}; do
    bspc config "${d}_padding" -6
    bspc config "${d}_monocle_padding" 6
done

bspc config split_ratio     0.52
bspc config borderless_monocle true
bspc config gapless_monocle true
bspc config focus_follows_pointer true
bspc config pointer_modifier mod4
bspc config pointer_action1 move
bspc config pointer_action2 resize_side
bspc config pointer_action3 resize_corner

# run a command in the background if available
# usage: launch <command> <args>
launch() {
    command -v "$1" &>/dev/null && "$@" 2>&1 &
}

# usage: relaunch-with "<kill-command>" <command> <args>
relaunch-with() {
    eval "$1"; shift; launch "$@"
}

# usage: relaunch <command> <args>
relaunch() {
    relaunch-with "killall -q '$1'" "$@"
}

export SXHKD_SHELL=/bin/sh
relaunch sxhkd
relaunch picom
relaunch dunst
pgrep redshift-gtk && redshift-gtk -x || launch redshift-gtk

# TODO: replace with autorandr or something
launch "$HOME/.screenlayout/$(hostname).sh"

launch "$HOME/.local/bin/wallpaper.sh"

# TODO: add "activities" (no relation to KDE activities, maybe find a better name. "tags"?)
# color+icon for each, active displayed in polybar (will need to maintain external state somewhere)
# associate active workspaces for each monitor with an activity
# switching to an activity switches all monitors to the last set of workspaces used in that activity
# changing workspaces in an activity updates that activity
# the same workspace can be active in multiple activities. they are effectively tags.
# eventually use this to build simple session restore
killall -q polybar
primary=$(bspc query -M -m primary --names)
for monitor in $(bspc query -M --names); do
    bspc monitor "$monitor" -d 1 2 3 4 5 6 7 8 9 10

    export POLYBAR_MONITOR="$monitor"
    # subtract padding from bar width here because polybar can only offset one side
    export POLYBAR_WIDTH=$(bspc query -T -m "$monitor" | jq -r '.rectangle.width - 12')
    if [ "$monitor" = "$primary" ]; then
        launch polybar -r main
    else
        launch polybar -r secondary
    fi
done

# TODO: move to external rules
if command -v picom-trans &>/dev/null; then
    xdotool search -class 'Webcord|Polybar' | xargs -I_ picom-trans -w _ 98
fi

# window rules
rule() {
    bspc rule -r "$1"
    bspc rule -a "$@"
}

# bspc config external_rules_command ~/.config/bspwm/scripts/external_rules.sh

rule "*:scratchpad:*" state=floating sticky=on
rule "screenshot_preview:*:*" state=floating

# NOTE: dropdown window must be made sticky manually. for some reason sticky and monitor cannot
# be used together
dropdown_rect=$(bspc query -T -m primary | jq -r '.rectangle | "\(.width - 4)x\(.height * 0.3)+\(.x)+\(.y)"')
rule "*:dropdown:*" state=floating monitor=primary rectangle="${dropdown_rect}" marked=on
